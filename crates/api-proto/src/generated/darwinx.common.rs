// This file is @generated by prost-build.
/// Vela OHLCV
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Candle {
    #[prost(int64, tag = "1")]
    pub timestamp: i64,
    #[prost(double, tag = "2")]
    pub open: f64,
    #[prost(double, tag = "3")]
    pub high: f64,
    #[prost(double, tag = "4")]
    pub low: f64,
    #[prost(double, tag = "5")]
    pub close: f64,
    #[prost(double, tag = "6")]
    pub volume: f64,
}
/// TimeFrame
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct TimeFrame {
    /// "1m", "5m", "1h", etc
    #[prost(string, tag = "1")]
    pub value: ::prost::alloc::string::String,
}
/// Signal
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Signal {
    #[prost(oneof = "signal::SignalType", tags = "1, 2, 3")]
    pub signal_type: ::core::option::Option<signal::SignalType>,
}
/// Nested message and enum types in `Signal`.
pub mod signal {
    #[derive(Clone, Copy, PartialEq, ::prost::Oneof)]
    pub enum SignalType {
        #[prost(message, tag = "1")]
        Buy(super::BuySignal),
        #[prost(message, tag = "2")]
        Sell(super::SellSignal),
        #[prost(message, tag = "3")]
        Hold(super::HoldSignal),
    }
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct BuySignal {
    #[prost(double, tag = "1")]
    pub price: f64,
    #[prost(double, tag = "2")]
    pub confidence: f64,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct SellSignal {
    #[prost(double, tag = "1")]
    pub price: f64,
    #[prost(double, tag = "2")]
    pub confidence: f64,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct HoldSignal {}
/// Position
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Position {
    #[prost(string, tag = "1")]
    pub symbol: ::prost::alloc::string::String,
    /// "LONG" or "SHORT"
    #[prost(string, tag = "2")]
    pub side: ::prost::alloc::string::String,
    #[prost(double, tag = "3")]
    pub entry_price: f64,
    #[prost(double, tag = "4")]
    pub quantity: f64,
    #[prost(int64, tag = "5")]
    pub timestamp: i64,
}
/// Order
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Order {
    #[prost(string, tag = "1")]
    pub id: ::prost::alloc::string::String,
    #[prost(string, tag = "2")]
    pub symbol: ::prost::alloc::string::String,
    /// "BUY" or "SELL"
    #[prost(string, tag = "3")]
    pub side: ::prost::alloc::string::String,
    #[prost(double, tag = "4")]
    pub price: f64,
    #[prost(double, tag = "5")]
    pub quantity: f64,
    #[prost(int64, tag = "6")]
    pub timestamp: i64,
}
